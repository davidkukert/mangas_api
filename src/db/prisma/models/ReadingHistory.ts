
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `ReadingHistory` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model ReadingHistory
 * 
 */
export type ReadingHistoryModel = runtime.Types.Result.DefaultSelection<Prisma.$ReadingHistoryPayload>

export type AggregateReadingHistory = {
  _count: ReadingHistoryCountAggregateOutputType | null
  _avg: ReadingHistoryAvgAggregateOutputType | null
  _sum: ReadingHistorySumAggregateOutputType | null
  _min: ReadingHistoryMinAggregateOutputType | null
  _max: ReadingHistoryMaxAggregateOutputType | null
}

export type ReadingHistoryAvgAggregateOutputType = {
  id: number | null
  page: number | null
}

export type ReadingHistorySumAggregateOutputType = {
  id: number | null
  page: number | null
}

export type ReadingHistoryMinAggregateOutputType = {
  id: number | null
  chapterId: string | null
  userId: string | null
  readingAt: Date | null
  page: number | null
}

export type ReadingHistoryMaxAggregateOutputType = {
  id: number | null
  chapterId: string | null
  userId: string | null
  readingAt: Date | null
  page: number | null
}

export type ReadingHistoryCountAggregateOutputType = {
  id: number
  chapterId: number
  userId: number
  readingAt: number
  page: number
  _all: number
}


export type ReadingHistoryAvgAggregateInputType = {
  id?: true
  page?: true
}

export type ReadingHistorySumAggregateInputType = {
  id?: true
  page?: true
}

export type ReadingHistoryMinAggregateInputType = {
  id?: true
  chapterId?: true
  userId?: true
  readingAt?: true
  page?: true
}

export type ReadingHistoryMaxAggregateInputType = {
  id?: true
  chapterId?: true
  userId?: true
  readingAt?: true
  page?: true
}

export type ReadingHistoryCountAggregateInputType = {
  id?: true
  chapterId?: true
  userId?: true
  readingAt?: true
  page?: true
  _all?: true
}

export type ReadingHistoryAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ReadingHistory to aggregate.
   */
  where?: Prisma.ReadingHistoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ReadingHistories to fetch.
   */
  orderBy?: Prisma.ReadingHistoryOrderByWithRelationInput | Prisma.ReadingHistoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ReadingHistoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ReadingHistories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ReadingHistories.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned ReadingHistories
  **/
  _count?: true | ReadingHistoryCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: ReadingHistoryAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: ReadingHistorySumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ReadingHistoryMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ReadingHistoryMaxAggregateInputType
}

export type GetReadingHistoryAggregateType<T extends ReadingHistoryAggregateArgs> = {
      [P in keyof T & keyof AggregateReadingHistory]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateReadingHistory[P]>
    : Prisma.GetScalarType<T[P], AggregateReadingHistory[P]>
}




export type ReadingHistoryGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ReadingHistoryWhereInput
  orderBy?: Prisma.ReadingHistoryOrderByWithAggregationInput | Prisma.ReadingHistoryOrderByWithAggregationInput[]
  by: Prisma.ReadingHistoryScalarFieldEnum[] | Prisma.ReadingHistoryScalarFieldEnum
  having?: Prisma.ReadingHistoryScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ReadingHistoryCountAggregateInputType | true
  _avg?: ReadingHistoryAvgAggregateInputType
  _sum?: ReadingHistorySumAggregateInputType
  _min?: ReadingHistoryMinAggregateInputType
  _max?: ReadingHistoryMaxAggregateInputType
}

export type ReadingHistoryGroupByOutputType = {
  id: number
  chapterId: string
  userId: string
  readingAt: Date
  page: number | null
  _count: ReadingHistoryCountAggregateOutputType | null
  _avg: ReadingHistoryAvgAggregateOutputType | null
  _sum: ReadingHistorySumAggregateOutputType | null
  _min: ReadingHistoryMinAggregateOutputType | null
  _max: ReadingHistoryMaxAggregateOutputType | null
}

type GetReadingHistoryGroupByPayload<T extends ReadingHistoryGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ReadingHistoryGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ReadingHistoryGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ReadingHistoryGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ReadingHistoryGroupByOutputType[P]>
      }
    >
  > 



export type ReadingHistoryWhereInput = {
  AND?: Prisma.ReadingHistoryWhereInput | Prisma.ReadingHistoryWhereInput[]
  OR?: Prisma.ReadingHistoryWhereInput[]
  NOT?: Prisma.ReadingHistoryWhereInput | Prisma.ReadingHistoryWhereInput[]
  id?: Prisma.IntFilter<"ReadingHistory"> | number
  chapterId?: Prisma.StringFilter<"ReadingHistory"> | string
  userId?: Prisma.StringFilter<"ReadingHistory"> | string
  readingAt?: Prisma.DateTimeFilter<"ReadingHistory"> | Date | string
  page?: Prisma.IntNullableFilter<"ReadingHistory"> | number | null
  chapter?: Prisma.XOR<Prisma.ChapterScalarRelationFilter, Prisma.ChapterWhereInput>
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}

export type ReadingHistoryOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  chapterId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  readingAt?: Prisma.SortOrder
  page?: Prisma.SortOrderInput | Prisma.SortOrder
  chapter?: Prisma.ChapterOrderByWithRelationInput
  user?: Prisma.UserOrderByWithRelationInput
}

export type ReadingHistoryWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  chapterId_userId?: Prisma.ReadingHistoryChapterIdUserIdCompoundUniqueInput
  AND?: Prisma.ReadingHistoryWhereInput | Prisma.ReadingHistoryWhereInput[]
  OR?: Prisma.ReadingHistoryWhereInput[]
  NOT?: Prisma.ReadingHistoryWhereInput | Prisma.ReadingHistoryWhereInput[]
  chapterId?: Prisma.StringFilter<"ReadingHistory"> | string
  userId?: Prisma.StringFilter<"ReadingHistory"> | string
  readingAt?: Prisma.DateTimeFilter<"ReadingHistory"> | Date | string
  page?: Prisma.IntNullableFilter<"ReadingHistory"> | number | null
  chapter?: Prisma.XOR<Prisma.ChapterScalarRelationFilter, Prisma.ChapterWhereInput>
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}, "id" | "chapterId_userId">

export type ReadingHistoryOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  chapterId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  readingAt?: Prisma.SortOrder
  page?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.ReadingHistoryCountOrderByAggregateInput
  _avg?: Prisma.ReadingHistoryAvgOrderByAggregateInput
  _max?: Prisma.ReadingHistoryMaxOrderByAggregateInput
  _min?: Prisma.ReadingHistoryMinOrderByAggregateInput
  _sum?: Prisma.ReadingHistorySumOrderByAggregateInput
}

export type ReadingHistoryScalarWhereWithAggregatesInput = {
  AND?: Prisma.ReadingHistoryScalarWhereWithAggregatesInput | Prisma.ReadingHistoryScalarWhereWithAggregatesInput[]
  OR?: Prisma.ReadingHistoryScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ReadingHistoryScalarWhereWithAggregatesInput | Prisma.ReadingHistoryScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"ReadingHistory"> | number
  chapterId?: Prisma.StringWithAggregatesFilter<"ReadingHistory"> | string
  userId?: Prisma.StringWithAggregatesFilter<"ReadingHistory"> | string
  readingAt?: Prisma.DateTimeWithAggregatesFilter<"ReadingHistory"> | Date | string
  page?: Prisma.IntNullableWithAggregatesFilter<"ReadingHistory"> | number | null
}

export type ReadingHistoryCreateInput = {
  readingAt?: Date | string
  page?: number | null
  chapter: Prisma.ChapterCreateNestedOneWithoutReadingHistoryInput
  user: Prisma.UserCreateNestedOneWithoutReadingHistoryInput
}

export type ReadingHistoryUncheckedCreateInput = {
  id?: number
  chapterId: string
  userId: string
  readingAt?: Date | string
  page?: number | null
}

export type ReadingHistoryUpdateInput = {
  readingAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  page?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  chapter?: Prisma.ChapterUpdateOneRequiredWithoutReadingHistoryNestedInput
  user?: Prisma.UserUpdateOneRequiredWithoutReadingHistoryNestedInput
}

export type ReadingHistoryUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  chapterId?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  readingAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  page?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}

export type ReadingHistoryCreateManyInput = {
  id?: number
  chapterId: string
  userId: string
  readingAt?: Date | string
  page?: number | null
}

export type ReadingHistoryUpdateManyMutationInput = {
  readingAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  page?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}

export type ReadingHistoryUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  chapterId?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  readingAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  page?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}

export type ReadingHistoryListRelationFilter = {
  every?: Prisma.ReadingHistoryWhereInput
  some?: Prisma.ReadingHistoryWhereInput
  none?: Prisma.ReadingHistoryWhereInput
}

export type ReadingHistoryOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ReadingHistoryChapterIdUserIdCompoundUniqueInput = {
  chapterId: string
  userId: string
}

export type ReadingHistoryCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  chapterId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  readingAt?: Prisma.SortOrder
  page?: Prisma.SortOrder
}

export type ReadingHistoryAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  page?: Prisma.SortOrder
}

export type ReadingHistoryMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  chapterId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  readingAt?: Prisma.SortOrder
  page?: Prisma.SortOrder
}

export type ReadingHistoryMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  chapterId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  readingAt?: Prisma.SortOrder
  page?: Prisma.SortOrder
}

export type ReadingHistorySumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  page?: Prisma.SortOrder
}

export type ReadingHistoryCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.ReadingHistoryCreateWithoutUserInput, Prisma.ReadingHistoryUncheckedCreateWithoutUserInput> | Prisma.ReadingHistoryCreateWithoutUserInput[] | Prisma.ReadingHistoryUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.ReadingHistoryCreateOrConnectWithoutUserInput | Prisma.ReadingHistoryCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.ReadingHistoryCreateManyUserInputEnvelope
  connect?: Prisma.ReadingHistoryWhereUniqueInput | Prisma.ReadingHistoryWhereUniqueInput[]
}

export type ReadingHistoryUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.ReadingHistoryCreateWithoutUserInput, Prisma.ReadingHistoryUncheckedCreateWithoutUserInput> | Prisma.ReadingHistoryCreateWithoutUserInput[] | Prisma.ReadingHistoryUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.ReadingHistoryCreateOrConnectWithoutUserInput | Prisma.ReadingHistoryCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.ReadingHistoryCreateManyUserInputEnvelope
  connect?: Prisma.ReadingHistoryWhereUniqueInput | Prisma.ReadingHistoryWhereUniqueInput[]
}

export type ReadingHistoryUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.ReadingHistoryCreateWithoutUserInput, Prisma.ReadingHistoryUncheckedCreateWithoutUserInput> | Prisma.ReadingHistoryCreateWithoutUserInput[] | Prisma.ReadingHistoryUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.ReadingHistoryCreateOrConnectWithoutUserInput | Prisma.ReadingHistoryCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.ReadingHistoryUpsertWithWhereUniqueWithoutUserInput | Prisma.ReadingHistoryUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.ReadingHistoryCreateManyUserInputEnvelope
  set?: Prisma.ReadingHistoryWhereUniqueInput | Prisma.ReadingHistoryWhereUniqueInput[]
  disconnect?: Prisma.ReadingHistoryWhereUniqueInput | Prisma.ReadingHistoryWhereUniqueInput[]
  delete?: Prisma.ReadingHistoryWhereUniqueInput | Prisma.ReadingHistoryWhereUniqueInput[]
  connect?: Prisma.ReadingHistoryWhereUniqueInput | Prisma.ReadingHistoryWhereUniqueInput[]
  update?: Prisma.ReadingHistoryUpdateWithWhereUniqueWithoutUserInput | Prisma.ReadingHistoryUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.ReadingHistoryUpdateManyWithWhereWithoutUserInput | Prisma.ReadingHistoryUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.ReadingHistoryScalarWhereInput | Prisma.ReadingHistoryScalarWhereInput[]
}

export type ReadingHistoryUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.ReadingHistoryCreateWithoutUserInput, Prisma.ReadingHistoryUncheckedCreateWithoutUserInput> | Prisma.ReadingHistoryCreateWithoutUserInput[] | Prisma.ReadingHistoryUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.ReadingHistoryCreateOrConnectWithoutUserInput | Prisma.ReadingHistoryCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.ReadingHistoryUpsertWithWhereUniqueWithoutUserInput | Prisma.ReadingHistoryUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.ReadingHistoryCreateManyUserInputEnvelope
  set?: Prisma.ReadingHistoryWhereUniqueInput | Prisma.ReadingHistoryWhereUniqueInput[]
  disconnect?: Prisma.ReadingHistoryWhereUniqueInput | Prisma.ReadingHistoryWhereUniqueInput[]
  delete?: Prisma.ReadingHistoryWhereUniqueInput | Prisma.ReadingHistoryWhereUniqueInput[]
  connect?: Prisma.ReadingHistoryWhereUniqueInput | Prisma.ReadingHistoryWhereUniqueInput[]
  update?: Prisma.ReadingHistoryUpdateWithWhereUniqueWithoutUserInput | Prisma.ReadingHistoryUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.ReadingHistoryUpdateManyWithWhereWithoutUserInput | Prisma.ReadingHistoryUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.ReadingHistoryScalarWhereInput | Prisma.ReadingHistoryScalarWhereInput[]
}

export type ReadingHistoryCreateNestedManyWithoutChapterInput = {
  create?: Prisma.XOR<Prisma.ReadingHistoryCreateWithoutChapterInput, Prisma.ReadingHistoryUncheckedCreateWithoutChapterInput> | Prisma.ReadingHistoryCreateWithoutChapterInput[] | Prisma.ReadingHistoryUncheckedCreateWithoutChapterInput[]
  connectOrCreate?: Prisma.ReadingHistoryCreateOrConnectWithoutChapterInput | Prisma.ReadingHistoryCreateOrConnectWithoutChapterInput[]
  createMany?: Prisma.ReadingHistoryCreateManyChapterInputEnvelope
  connect?: Prisma.ReadingHistoryWhereUniqueInput | Prisma.ReadingHistoryWhereUniqueInput[]
}

export type ReadingHistoryUncheckedCreateNestedManyWithoutChapterInput = {
  create?: Prisma.XOR<Prisma.ReadingHistoryCreateWithoutChapterInput, Prisma.ReadingHistoryUncheckedCreateWithoutChapterInput> | Prisma.ReadingHistoryCreateWithoutChapterInput[] | Prisma.ReadingHistoryUncheckedCreateWithoutChapterInput[]
  connectOrCreate?: Prisma.ReadingHistoryCreateOrConnectWithoutChapterInput | Prisma.ReadingHistoryCreateOrConnectWithoutChapterInput[]
  createMany?: Prisma.ReadingHistoryCreateManyChapterInputEnvelope
  connect?: Prisma.ReadingHistoryWhereUniqueInput | Prisma.ReadingHistoryWhereUniqueInput[]
}

export type ReadingHistoryUpdateManyWithoutChapterNestedInput = {
  create?: Prisma.XOR<Prisma.ReadingHistoryCreateWithoutChapterInput, Prisma.ReadingHistoryUncheckedCreateWithoutChapterInput> | Prisma.ReadingHistoryCreateWithoutChapterInput[] | Prisma.ReadingHistoryUncheckedCreateWithoutChapterInput[]
  connectOrCreate?: Prisma.ReadingHistoryCreateOrConnectWithoutChapterInput | Prisma.ReadingHistoryCreateOrConnectWithoutChapterInput[]
  upsert?: Prisma.ReadingHistoryUpsertWithWhereUniqueWithoutChapterInput | Prisma.ReadingHistoryUpsertWithWhereUniqueWithoutChapterInput[]
  createMany?: Prisma.ReadingHistoryCreateManyChapterInputEnvelope
  set?: Prisma.ReadingHistoryWhereUniqueInput | Prisma.ReadingHistoryWhereUniqueInput[]
  disconnect?: Prisma.ReadingHistoryWhereUniqueInput | Prisma.ReadingHistoryWhereUniqueInput[]
  delete?: Prisma.ReadingHistoryWhereUniqueInput | Prisma.ReadingHistoryWhereUniqueInput[]
  connect?: Prisma.ReadingHistoryWhereUniqueInput | Prisma.ReadingHistoryWhereUniqueInput[]
  update?: Prisma.ReadingHistoryUpdateWithWhereUniqueWithoutChapterInput | Prisma.ReadingHistoryUpdateWithWhereUniqueWithoutChapterInput[]
  updateMany?: Prisma.ReadingHistoryUpdateManyWithWhereWithoutChapterInput | Prisma.ReadingHistoryUpdateManyWithWhereWithoutChapterInput[]
  deleteMany?: Prisma.ReadingHistoryScalarWhereInput | Prisma.ReadingHistoryScalarWhereInput[]
}

export type ReadingHistoryUncheckedUpdateManyWithoutChapterNestedInput = {
  create?: Prisma.XOR<Prisma.ReadingHistoryCreateWithoutChapterInput, Prisma.ReadingHistoryUncheckedCreateWithoutChapterInput> | Prisma.ReadingHistoryCreateWithoutChapterInput[] | Prisma.ReadingHistoryUncheckedCreateWithoutChapterInput[]
  connectOrCreate?: Prisma.ReadingHistoryCreateOrConnectWithoutChapterInput | Prisma.ReadingHistoryCreateOrConnectWithoutChapterInput[]
  upsert?: Prisma.ReadingHistoryUpsertWithWhereUniqueWithoutChapterInput | Prisma.ReadingHistoryUpsertWithWhereUniqueWithoutChapterInput[]
  createMany?: Prisma.ReadingHistoryCreateManyChapterInputEnvelope
  set?: Prisma.ReadingHistoryWhereUniqueInput | Prisma.ReadingHistoryWhereUniqueInput[]
  disconnect?: Prisma.ReadingHistoryWhereUniqueInput | Prisma.ReadingHistoryWhereUniqueInput[]
  delete?: Prisma.ReadingHistoryWhereUniqueInput | Prisma.ReadingHistoryWhereUniqueInput[]
  connect?: Prisma.ReadingHistoryWhereUniqueInput | Prisma.ReadingHistoryWhereUniqueInput[]
  update?: Prisma.ReadingHistoryUpdateWithWhereUniqueWithoutChapterInput | Prisma.ReadingHistoryUpdateWithWhereUniqueWithoutChapterInput[]
  updateMany?: Prisma.ReadingHistoryUpdateManyWithWhereWithoutChapterInput | Prisma.ReadingHistoryUpdateManyWithWhereWithoutChapterInput[]
  deleteMany?: Prisma.ReadingHistoryScalarWhereInput | Prisma.ReadingHistoryScalarWhereInput[]
}

export type ReadingHistoryCreateWithoutUserInput = {
  readingAt?: Date | string
  page?: number | null
  chapter: Prisma.ChapterCreateNestedOneWithoutReadingHistoryInput
}

export type ReadingHistoryUncheckedCreateWithoutUserInput = {
  id?: number
  chapterId: string
  readingAt?: Date | string
  page?: number | null
}

export type ReadingHistoryCreateOrConnectWithoutUserInput = {
  where: Prisma.ReadingHistoryWhereUniqueInput
  create: Prisma.XOR<Prisma.ReadingHistoryCreateWithoutUserInput, Prisma.ReadingHistoryUncheckedCreateWithoutUserInput>
}

export type ReadingHistoryCreateManyUserInputEnvelope = {
  data: Prisma.ReadingHistoryCreateManyUserInput | Prisma.ReadingHistoryCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type ReadingHistoryUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.ReadingHistoryWhereUniqueInput
  update: Prisma.XOR<Prisma.ReadingHistoryUpdateWithoutUserInput, Prisma.ReadingHistoryUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.ReadingHistoryCreateWithoutUserInput, Prisma.ReadingHistoryUncheckedCreateWithoutUserInput>
}

export type ReadingHistoryUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.ReadingHistoryWhereUniqueInput
  data: Prisma.XOR<Prisma.ReadingHistoryUpdateWithoutUserInput, Prisma.ReadingHistoryUncheckedUpdateWithoutUserInput>
}

export type ReadingHistoryUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.ReadingHistoryScalarWhereInput
  data: Prisma.XOR<Prisma.ReadingHistoryUpdateManyMutationInput, Prisma.ReadingHistoryUncheckedUpdateManyWithoutUserInput>
}

export type ReadingHistoryScalarWhereInput = {
  AND?: Prisma.ReadingHistoryScalarWhereInput | Prisma.ReadingHistoryScalarWhereInput[]
  OR?: Prisma.ReadingHistoryScalarWhereInput[]
  NOT?: Prisma.ReadingHistoryScalarWhereInput | Prisma.ReadingHistoryScalarWhereInput[]
  id?: Prisma.IntFilter<"ReadingHistory"> | number
  chapterId?: Prisma.StringFilter<"ReadingHistory"> | string
  userId?: Prisma.StringFilter<"ReadingHistory"> | string
  readingAt?: Prisma.DateTimeFilter<"ReadingHistory"> | Date | string
  page?: Prisma.IntNullableFilter<"ReadingHistory"> | number | null
}

export type ReadingHistoryCreateWithoutChapterInput = {
  readingAt?: Date | string
  page?: number | null
  user: Prisma.UserCreateNestedOneWithoutReadingHistoryInput
}

export type ReadingHistoryUncheckedCreateWithoutChapterInput = {
  id?: number
  userId: string
  readingAt?: Date | string
  page?: number | null
}

export type ReadingHistoryCreateOrConnectWithoutChapterInput = {
  where: Prisma.ReadingHistoryWhereUniqueInput
  create: Prisma.XOR<Prisma.ReadingHistoryCreateWithoutChapterInput, Prisma.ReadingHistoryUncheckedCreateWithoutChapterInput>
}

export type ReadingHistoryCreateManyChapterInputEnvelope = {
  data: Prisma.ReadingHistoryCreateManyChapterInput | Prisma.ReadingHistoryCreateManyChapterInput[]
  skipDuplicates?: boolean
}

export type ReadingHistoryUpsertWithWhereUniqueWithoutChapterInput = {
  where: Prisma.ReadingHistoryWhereUniqueInput
  update: Prisma.XOR<Prisma.ReadingHistoryUpdateWithoutChapterInput, Prisma.ReadingHistoryUncheckedUpdateWithoutChapterInput>
  create: Prisma.XOR<Prisma.ReadingHistoryCreateWithoutChapterInput, Prisma.ReadingHistoryUncheckedCreateWithoutChapterInput>
}

export type ReadingHistoryUpdateWithWhereUniqueWithoutChapterInput = {
  where: Prisma.ReadingHistoryWhereUniqueInput
  data: Prisma.XOR<Prisma.ReadingHistoryUpdateWithoutChapterInput, Prisma.ReadingHistoryUncheckedUpdateWithoutChapterInput>
}

export type ReadingHistoryUpdateManyWithWhereWithoutChapterInput = {
  where: Prisma.ReadingHistoryScalarWhereInput
  data: Prisma.XOR<Prisma.ReadingHistoryUpdateManyMutationInput, Prisma.ReadingHistoryUncheckedUpdateManyWithoutChapterInput>
}

export type ReadingHistoryCreateManyUserInput = {
  id?: number
  chapterId: string
  readingAt?: Date | string
  page?: number | null
}

export type ReadingHistoryUpdateWithoutUserInput = {
  readingAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  page?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  chapter?: Prisma.ChapterUpdateOneRequiredWithoutReadingHistoryNestedInput
}

export type ReadingHistoryUncheckedUpdateWithoutUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  chapterId?: Prisma.StringFieldUpdateOperationsInput | string
  readingAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  page?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}

export type ReadingHistoryUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  chapterId?: Prisma.StringFieldUpdateOperationsInput | string
  readingAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  page?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}

export type ReadingHistoryCreateManyChapterInput = {
  id?: number
  userId: string
  readingAt?: Date | string
  page?: number | null
}

export type ReadingHistoryUpdateWithoutChapterInput = {
  readingAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  page?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  user?: Prisma.UserUpdateOneRequiredWithoutReadingHistoryNestedInput
}

export type ReadingHistoryUncheckedUpdateWithoutChapterInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  readingAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  page?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}

export type ReadingHistoryUncheckedUpdateManyWithoutChapterInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  readingAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  page?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}



export type ReadingHistorySelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  chapterId?: boolean
  userId?: boolean
  readingAt?: boolean
  page?: boolean
  chapter?: boolean | Prisma.ChapterDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["readingHistory"]>

export type ReadingHistorySelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  chapterId?: boolean
  userId?: boolean
  readingAt?: boolean
  page?: boolean
  chapter?: boolean | Prisma.ChapterDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["readingHistory"]>

export type ReadingHistorySelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  chapterId?: boolean
  userId?: boolean
  readingAt?: boolean
  page?: boolean
  chapter?: boolean | Prisma.ChapterDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["readingHistory"]>

export type ReadingHistorySelectScalar = {
  id?: boolean
  chapterId?: boolean
  userId?: boolean
  readingAt?: boolean
  page?: boolean
}

export type ReadingHistoryOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "chapterId" | "userId" | "readingAt" | "page", ExtArgs["result"]["readingHistory"]>
export type ReadingHistoryInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  chapter?: boolean | Prisma.ChapterDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type ReadingHistoryIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  chapter?: boolean | Prisma.ChapterDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type ReadingHistoryIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  chapter?: boolean | Prisma.ChapterDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $ReadingHistoryPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "ReadingHistory"
  objects: {
    chapter: Prisma.$ChapterPayload<ExtArgs>
    user: Prisma.$UserPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    chapterId: string
    userId: string
    readingAt: Date
    page: number | null
  }, ExtArgs["result"]["readingHistory"]>
  composites: {}
}

export type ReadingHistoryGetPayload<S extends boolean | null | undefined | ReadingHistoryDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ReadingHistoryPayload, S>

export type ReadingHistoryCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ReadingHistoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ReadingHistoryCountAggregateInputType | true
  }

export interface ReadingHistoryDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ReadingHistory'], meta: { name: 'ReadingHistory' } }
  /**
   * Find zero or one ReadingHistory that matches the filter.
   * @param {ReadingHistoryFindUniqueArgs} args - Arguments to find a ReadingHistory
   * @example
   * // Get one ReadingHistory
   * const readingHistory = await prisma.readingHistory.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ReadingHistoryFindUniqueArgs>(args: Prisma.SelectSubset<T, ReadingHistoryFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ReadingHistoryClient<runtime.Types.Result.GetResult<Prisma.$ReadingHistoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one ReadingHistory that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ReadingHistoryFindUniqueOrThrowArgs} args - Arguments to find a ReadingHistory
   * @example
   * // Get one ReadingHistory
   * const readingHistory = await prisma.readingHistory.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ReadingHistoryFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ReadingHistoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ReadingHistoryClient<runtime.Types.Result.GetResult<Prisma.$ReadingHistoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ReadingHistory that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ReadingHistoryFindFirstArgs} args - Arguments to find a ReadingHistory
   * @example
   * // Get one ReadingHistory
   * const readingHistory = await prisma.readingHistory.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ReadingHistoryFindFirstArgs>(args?: Prisma.SelectSubset<T, ReadingHistoryFindFirstArgs<ExtArgs>>): Prisma.Prisma__ReadingHistoryClient<runtime.Types.Result.GetResult<Prisma.$ReadingHistoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ReadingHistory that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ReadingHistoryFindFirstOrThrowArgs} args - Arguments to find a ReadingHistory
   * @example
   * // Get one ReadingHistory
   * const readingHistory = await prisma.readingHistory.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ReadingHistoryFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ReadingHistoryFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ReadingHistoryClient<runtime.Types.Result.GetResult<Prisma.$ReadingHistoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more ReadingHistories that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ReadingHistoryFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ReadingHistories
   * const readingHistories = await prisma.readingHistory.findMany()
   * 
   * // Get first 10 ReadingHistories
   * const readingHistories = await prisma.readingHistory.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const readingHistoryWithIdOnly = await prisma.readingHistory.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ReadingHistoryFindManyArgs>(args?: Prisma.SelectSubset<T, ReadingHistoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ReadingHistoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a ReadingHistory.
   * @param {ReadingHistoryCreateArgs} args - Arguments to create a ReadingHistory.
   * @example
   * // Create one ReadingHistory
   * const ReadingHistory = await prisma.readingHistory.create({
   *   data: {
   *     // ... data to create a ReadingHistory
   *   }
   * })
   * 
   */
  create<T extends ReadingHistoryCreateArgs>(args: Prisma.SelectSubset<T, ReadingHistoryCreateArgs<ExtArgs>>): Prisma.Prisma__ReadingHistoryClient<runtime.Types.Result.GetResult<Prisma.$ReadingHistoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many ReadingHistories.
   * @param {ReadingHistoryCreateManyArgs} args - Arguments to create many ReadingHistories.
   * @example
   * // Create many ReadingHistories
   * const readingHistory = await prisma.readingHistory.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ReadingHistoryCreateManyArgs>(args?: Prisma.SelectSubset<T, ReadingHistoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many ReadingHistories and returns the data saved in the database.
   * @param {ReadingHistoryCreateManyAndReturnArgs} args - Arguments to create many ReadingHistories.
   * @example
   * // Create many ReadingHistories
   * const readingHistory = await prisma.readingHistory.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many ReadingHistories and only return the `id`
   * const readingHistoryWithIdOnly = await prisma.readingHistory.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ReadingHistoryCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ReadingHistoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ReadingHistoryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a ReadingHistory.
   * @param {ReadingHistoryDeleteArgs} args - Arguments to delete one ReadingHistory.
   * @example
   * // Delete one ReadingHistory
   * const ReadingHistory = await prisma.readingHistory.delete({
   *   where: {
   *     // ... filter to delete one ReadingHistory
   *   }
   * })
   * 
   */
  delete<T extends ReadingHistoryDeleteArgs>(args: Prisma.SelectSubset<T, ReadingHistoryDeleteArgs<ExtArgs>>): Prisma.Prisma__ReadingHistoryClient<runtime.Types.Result.GetResult<Prisma.$ReadingHistoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one ReadingHistory.
   * @param {ReadingHistoryUpdateArgs} args - Arguments to update one ReadingHistory.
   * @example
   * // Update one ReadingHistory
   * const readingHistory = await prisma.readingHistory.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ReadingHistoryUpdateArgs>(args: Prisma.SelectSubset<T, ReadingHistoryUpdateArgs<ExtArgs>>): Prisma.Prisma__ReadingHistoryClient<runtime.Types.Result.GetResult<Prisma.$ReadingHistoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more ReadingHistories.
   * @param {ReadingHistoryDeleteManyArgs} args - Arguments to filter ReadingHistories to delete.
   * @example
   * // Delete a few ReadingHistories
   * const { count } = await prisma.readingHistory.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ReadingHistoryDeleteManyArgs>(args?: Prisma.SelectSubset<T, ReadingHistoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ReadingHistories.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ReadingHistoryUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ReadingHistories
   * const readingHistory = await prisma.readingHistory.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ReadingHistoryUpdateManyArgs>(args: Prisma.SelectSubset<T, ReadingHistoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ReadingHistories and returns the data updated in the database.
   * @param {ReadingHistoryUpdateManyAndReturnArgs} args - Arguments to update many ReadingHistories.
   * @example
   * // Update many ReadingHistories
   * const readingHistory = await prisma.readingHistory.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more ReadingHistories and only return the `id`
   * const readingHistoryWithIdOnly = await prisma.readingHistory.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ReadingHistoryUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ReadingHistoryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ReadingHistoryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one ReadingHistory.
   * @param {ReadingHistoryUpsertArgs} args - Arguments to update or create a ReadingHistory.
   * @example
   * // Update or create a ReadingHistory
   * const readingHistory = await prisma.readingHistory.upsert({
   *   create: {
   *     // ... data to create a ReadingHistory
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ReadingHistory we want to update
   *   }
   * })
   */
  upsert<T extends ReadingHistoryUpsertArgs>(args: Prisma.SelectSubset<T, ReadingHistoryUpsertArgs<ExtArgs>>): Prisma.Prisma__ReadingHistoryClient<runtime.Types.Result.GetResult<Prisma.$ReadingHistoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of ReadingHistories.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ReadingHistoryCountArgs} args - Arguments to filter ReadingHistories to count.
   * @example
   * // Count the number of ReadingHistories
   * const count = await prisma.readingHistory.count({
   *   where: {
   *     // ... the filter for the ReadingHistories we want to count
   *   }
   * })
  **/
  count<T extends ReadingHistoryCountArgs>(
    args?: Prisma.Subset<T, ReadingHistoryCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ReadingHistoryCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a ReadingHistory.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ReadingHistoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ReadingHistoryAggregateArgs>(args: Prisma.Subset<T, ReadingHistoryAggregateArgs>): Prisma.PrismaPromise<GetReadingHistoryAggregateType<T>>

  /**
   * Group by ReadingHistory.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ReadingHistoryGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ReadingHistoryGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ReadingHistoryGroupByArgs['orderBy'] }
      : { orderBy?: ReadingHistoryGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ReadingHistoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReadingHistoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the ReadingHistory model
 */
readonly fields: ReadingHistoryFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ReadingHistory.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ReadingHistoryClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  chapter<T extends Prisma.ChapterDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ChapterDefaultArgs<ExtArgs>>): Prisma.Prisma__ChapterClient<runtime.Types.Result.GetResult<Prisma.$ChapterPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the ReadingHistory model
 */
export interface ReadingHistoryFieldRefs {
  readonly id: Prisma.FieldRef<"ReadingHistory", 'Int'>
  readonly chapterId: Prisma.FieldRef<"ReadingHistory", 'String'>
  readonly userId: Prisma.FieldRef<"ReadingHistory", 'String'>
  readonly readingAt: Prisma.FieldRef<"ReadingHistory", 'DateTime'>
  readonly page: Prisma.FieldRef<"ReadingHistory", 'Int'>
}
    

// Custom InputTypes
/**
 * ReadingHistory findUnique
 */
export type ReadingHistoryFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ReadingHistory
   */
  select?: Prisma.ReadingHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the ReadingHistory
   */
  omit?: Prisma.ReadingHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReadingHistoryInclude<ExtArgs> | null
  /**
   * Filter, which ReadingHistory to fetch.
   */
  where: Prisma.ReadingHistoryWhereUniqueInput
}

/**
 * ReadingHistory findUniqueOrThrow
 */
export type ReadingHistoryFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ReadingHistory
   */
  select?: Prisma.ReadingHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the ReadingHistory
   */
  omit?: Prisma.ReadingHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReadingHistoryInclude<ExtArgs> | null
  /**
   * Filter, which ReadingHistory to fetch.
   */
  where: Prisma.ReadingHistoryWhereUniqueInput
}

/**
 * ReadingHistory findFirst
 */
export type ReadingHistoryFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ReadingHistory
   */
  select?: Prisma.ReadingHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the ReadingHistory
   */
  omit?: Prisma.ReadingHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReadingHistoryInclude<ExtArgs> | null
  /**
   * Filter, which ReadingHistory to fetch.
   */
  where?: Prisma.ReadingHistoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ReadingHistories to fetch.
   */
  orderBy?: Prisma.ReadingHistoryOrderByWithRelationInput | Prisma.ReadingHistoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ReadingHistories.
   */
  cursor?: Prisma.ReadingHistoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ReadingHistories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ReadingHistories.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ReadingHistories.
   */
  distinct?: Prisma.ReadingHistoryScalarFieldEnum | Prisma.ReadingHistoryScalarFieldEnum[]
}

/**
 * ReadingHistory findFirstOrThrow
 */
export type ReadingHistoryFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ReadingHistory
   */
  select?: Prisma.ReadingHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the ReadingHistory
   */
  omit?: Prisma.ReadingHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReadingHistoryInclude<ExtArgs> | null
  /**
   * Filter, which ReadingHistory to fetch.
   */
  where?: Prisma.ReadingHistoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ReadingHistories to fetch.
   */
  orderBy?: Prisma.ReadingHistoryOrderByWithRelationInput | Prisma.ReadingHistoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ReadingHistories.
   */
  cursor?: Prisma.ReadingHistoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ReadingHistories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ReadingHistories.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ReadingHistories.
   */
  distinct?: Prisma.ReadingHistoryScalarFieldEnum | Prisma.ReadingHistoryScalarFieldEnum[]
}

/**
 * ReadingHistory findMany
 */
export type ReadingHistoryFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ReadingHistory
   */
  select?: Prisma.ReadingHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the ReadingHistory
   */
  omit?: Prisma.ReadingHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReadingHistoryInclude<ExtArgs> | null
  /**
   * Filter, which ReadingHistories to fetch.
   */
  where?: Prisma.ReadingHistoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ReadingHistories to fetch.
   */
  orderBy?: Prisma.ReadingHistoryOrderByWithRelationInput | Prisma.ReadingHistoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing ReadingHistories.
   */
  cursor?: Prisma.ReadingHistoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ReadingHistories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ReadingHistories.
   */
  skip?: number
  distinct?: Prisma.ReadingHistoryScalarFieldEnum | Prisma.ReadingHistoryScalarFieldEnum[]
}

/**
 * ReadingHistory create
 */
export type ReadingHistoryCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ReadingHistory
   */
  select?: Prisma.ReadingHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the ReadingHistory
   */
  omit?: Prisma.ReadingHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReadingHistoryInclude<ExtArgs> | null
  /**
   * The data needed to create a ReadingHistory.
   */
  data: Prisma.XOR<Prisma.ReadingHistoryCreateInput, Prisma.ReadingHistoryUncheckedCreateInput>
}

/**
 * ReadingHistory createMany
 */
export type ReadingHistoryCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many ReadingHistories.
   */
  data: Prisma.ReadingHistoryCreateManyInput | Prisma.ReadingHistoryCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * ReadingHistory createManyAndReturn
 */
export type ReadingHistoryCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ReadingHistory
   */
  select?: Prisma.ReadingHistorySelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ReadingHistory
   */
  omit?: Prisma.ReadingHistoryOmit<ExtArgs> | null
  /**
   * The data used to create many ReadingHistories.
   */
  data: Prisma.ReadingHistoryCreateManyInput | Prisma.ReadingHistoryCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReadingHistoryIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * ReadingHistory update
 */
export type ReadingHistoryUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ReadingHistory
   */
  select?: Prisma.ReadingHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the ReadingHistory
   */
  omit?: Prisma.ReadingHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReadingHistoryInclude<ExtArgs> | null
  /**
   * The data needed to update a ReadingHistory.
   */
  data: Prisma.XOR<Prisma.ReadingHistoryUpdateInput, Prisma.ReadingHistoryUncheckedUpdateInput>
  /**
   * Choose, which ReadingHistory to update.
   */
  where: Prisma.ReadingHistoryWhereUniqueInput
}

/**
 * ReadingHistory updateMany
 */
export type ReadingHistoryUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update ReadingHistories.
   */
  data: Prisma.XOR<Prisma.ReadingHistoryUpdateManyMutationInput, Prisma.ReadingHistoryUncheckedUpdateManyInput>
  /**
   * Filter which ReadingHistories to update
   */
  where?: Prisma.ReadingHistoryWhereInput
  /**
   * Limit how many ReadingHistories to update.
   */
  limit?: number
}

/**
 * ReadingHistory updateManyAndReturn
 */
export type ReadingHistoryUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ReadingHistory
   */
  select?: Prisma.ReadingHistorySelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ReadingHistory
   */
  omit?: Prisma.ReadingHistoryOmit<ExtArgs> | null
  /**
   * The data used to update ReadingHistories.
   */
  data: Prisma.XOR<Prisma.ReadingHistoryUpdateManyMutationInput, Prisma.ReadingHistoryUncheckedUpdateManyInput>
  /**
   * Filter which ReadingHistories to update
   */
  where?: Prisma.ReadingHistoryWhereInput
  /**
   * Limit how many ReadingHistories to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReadingHistoryIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * ReadingHistory upsert
 */
export type ReadingHistoryUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ReadingHistory
   */
  select?: Prisma.ReadingHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the ReadingHistory
   */
  omit?: Prisma.ReadingHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReadingHistoryInclude<ExtArgs> | null
  /**
   * The filter to search for the ReadingHistory to update in case it exists.
   */
  where: Prisma.ReadingHistoryWhereUniqueInput
  /**
   * In case the ReadingHistory found by the `where` argument doesn't exist, create a new ReadingHistory with this data.
   */
  create: Prisma.XOR<Prisma.ReadingHistoryCreateInput, Prisma.ReadingHistoryUncheckedCreateInput>
  /**
   * In case the ReadingHistory was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ReadingHistoryUpdateInput, Prisma.ReadingHistoryUncheckedUpdateInput>
}

/**
 * ReadingHistory delete
 */
export type ReadingHistoryDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ReadingHistory
   */
  select?: Prisma.ReadingHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the ReadingHistory
   */
  omit?: Prisma.ReadingHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReadingHistoryInclude<ExtArgs> | null
  /**
   * Filter which ReadingHistory to delete.
   */
  where: Prisma.ReadingHistoryWhereUniqueInput
}

/**
 * ReadingHistory deleteMany
 */
export type ReadingHistoryDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ReadingHistories to delete
   */
  where?: Prisma.ReadingHistoryWhereInput
  /**
   * Limit how many ReadingHistories to delete.
   */
  limit?: number
}

/**
 * ReadingHistory without action
 */
export type ReadingHistoryDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ReadingHistory
   */
  select?: Prisma.ReadingHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the ReadingHistory
   */
  omit?: Prisma.ReadingHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReadingHistoryInclude<ExtArgs> | null
}
