
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `MangaFollower` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model MangaFollower
 * 
 */
export type MangaFollowerModel = runtime.Types.Result.DefaultSelection<Prisma.$MangaFollowerPayload>

export type AggregateMangaFollower = {
  _count: MangaFollowerCountAggregateOutputType | null
  _avg: MangaFollowerAvgAggregateOutputType | null
  _sum: MangaFollowerSumAggregateOutputType | null
  _min: MangaFollowerMinAggregateOutputType | null
  _max: MangaFollowerMaxAggregateOutputType | null
}

export type MangaFollowerAvgAggregateOutputType = {
  id: number | null
}

export type MangaFollowerSumAggregateOutputType = {
  id: number | null
}

export type MangaFollowerMinAggregateOutputType = {
  id: number | null
  mangaId: string | null
  followerId: string | null
  status: $Enums.FollowStatusEnum | null
}

export type MangaFollowerMaxAggregateOutputType = {
  id: number | null
  mangaId: string | null
  followerId: string | null
  status: $Enums.FollowStatusEnum | null
}

export type MangaFollowerCountAggregateOutputType = {
  id: number
  mangaId: number
  followerId: number
  status: number
  _all: number
}


export type MangaFollowerAvgAggregateInputType = {
  id?: true
}

export type MangaFollowerSumAggregateInputType = {
  id?: true
}

export type MangaFollowerMinAggregateInputType = {
  id?: true
  mangaId?: true
  followerId?: true
  status?: true
}

export type MangaFollowerMaxAggregateInputType = {
  id?: true
  mangaId?: true
  followerId?: true
  status?: true
}

export type MangaFollowerCountAggregateInputType = {
  id?: true
  mangaId?: true
  followerId?: true
  status?: true
  _all?: true
}

export type MangaFollowerAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which MangaFollower to aggregate.
   */
  where?: Prisma.MangaFollowerWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MangaFollowers to fetch.
   */
  orderBy?: Prisma.MangaFollowerOrderByWithRelationInput | Prisma.MangaFollowerOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.MangaFollowerWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MangaFollowers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MangaFollowers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned MangaFollowers
  **/
  _count?: true | MangaFollowerCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: MangaFollowerAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: MangaFollowerSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: MangaFollowerMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: MangaFollowerMaxAggregateInputType
}

export type GetMangaFollowerAggregateType<T extends MangaFollowerAggregateArgs> = {
      [P in keyof T & keyof AggregateMangaFollower]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateMangaFollower[P]>
    : Prisma.GetScalarType<T[P], AggregateMangaFollower[P]>
}




export type MangaFollowerGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.MangaFollowerWhereInput
  orderBy?: Prisma.MangaFollowerOrderByWithAggregationInput | Prisma.MangaFollowerOrderByWithAggregationInput[]
  by: Prisma.MangaFollowerScalarFieldEnum[] | Prisma.MangaFollowerScalarFieldEnum
  having?: Prisma.MangaFollowerScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: MangaFollowerCountAggregateInputType | true
  _avg?: MangaFollowerAvgAggregateInputType
  _sum?: MangaFollowerSumAggregateInputType
  _min?: MangaFollowerMinAggregateInputType
  _max?: MangaFollowerMaxAggregateInputType
}

export type MangaFollowerGroupByOutputType = {
  id: number
  mangaId: string
  followerId: string
  status: $Enums.FollowStatusEnum
  _count: MangaFollowerCountAggregateOutputType | null
  _avg: MangaFollowerAvgAggregateOutputType | null
  _sum: MangaFollowerSumAggregateOutputType | null
  _min: MangaFollowerMinAggregateOutputType | null
  _max: MangaFollowerMaxAggregateOutputType | null
}

type GetMangaFollowerGroupByPayload<T extends MangaFollowerGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<MangaFollowerGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof MangaFollowerGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], MangaFollowerGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], MangaFollowerGroupByOutputType[P]>
      }
    >
  > 



export type MangaFollowerWhereInput = {
  AND?: Prisma.MangaFollowerWhereInput | Prisma.MangaFollowerWhereInput[]
  OR?: Prisma.MangaFollowerWhereInput[]
  NOT?: Prisma.MangaFollowerWhereInput | Prisma.MangaFollowerWhereInput[]
  id?: Prisma.IntFilter<"MangaFollower"> | number
  mangaId?: Prisma.StringFilter<"MangaFollower"> | string
  followerId?: Prisma.StringFilter<"MangaFollower"> | string
  status?: Prisma.EnumFollowStatusEnumFilter<"MangaFollower"> | $Enums.FollowStatusEnum
  manga?: Prisma.XOR<Prisma.MangaScalarRelationFilter, Prisma.MangaWhereInput>
  follower?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}

export type MangaFollowerOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  mangaId?: Prisma.SortOrder
  followerId?: Prisma.SortOrder
  status?: Prisma.SortOrder
  manga?: Prisma.MangaOrderByWithRelationInput
  follower?: Prisma.UserOrderByWithRelationInput
}

export type MangaFollowerWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  mangaId_followerId?: Prisma.MangaFollowerMangaIdFollowerIdCompoundUniqueInput
  AND?: Prisma.MangaFollowerWhereInput | Prisma.MangaFollowerWhereInput[]
  OR?: Prisma.MangaFollowerWhereInput[]
  NOT?: Prisma.MangaFollowerWhereInput | Prisma.MangaFollowerWhereInput[]
  mangaId?: Prisma.StringFilter<"MangaFollower"> | string
  followerId?: Prisma.StringFilter<"MangaFollower"> | string
  status?: Prisma.EnumFollowStatusEnumFilter<"MangaFollower"> | $Enums.FollowStatusEnum
  manga?: Prisma.XOR<Prisma.MangaScalarRelationFilter, Prisma.MangaWhereInput>
  follower?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}, "id" | "mangaId_followerId">

export type MangaFollowerOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  mangaId?: Prisma.SortOrder
  followerId?: Prisma.SortOrder
  status?: Prisma.SortOrder
  _count?: Prisma.MangaFollowerCountOrderByAggregateInput
  _avg?: Prisma.MangaFollowerAvgOrderByAggregateInput
  _max?: Prisma.MangaFollowerMaxOrderByAggregateInput
  _min?: Prisma.MangaFollowerMinOrderByAggregateInput
  _sum?: Prisma.MangaFollowerSumOrderByAggregateInput
}

export type MangaFollowerScalarWhereWithAggregatesInput = {
  AND?: Prisma.MangaFollowerScalarWhereWithAggregatesInput | Prisma.MangaFollowerScalarWhereWithAggregatesInput[]
  OR?: Prisma.MangaFollowerScalarWhereWithAggregatesInput[]
  NOT?: Prisma.MangaFollowerScalarWhereWithAggregatesInput | Prisma.MangaFollowerScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"MangaFollower"> | number
  mangaId?: Prisma.StringWithAggregatesFilter<"MangaFollower"> | string
  followerId?: Prisma.StringWithAggregatesFilter<"MangaFollower"> | string
  status?: Prisma.EnumFollowStatusEnumWithAggregatesFilter<"MangaFollower"> | $Enums.FollowStatusEnum
}

export type MangaFollowerCreateInput = {
  status?: $Enums.FollowStatusEnum
  manga: Prisma.MangaCreateNestedOneWithoutFollowersInput
  follower: Prisma.UserCreateNestedOneWithoutFollowingMangasInput
}

export type MangaFollowerUncheckedCreateInput = {
  id?: number
  mangaId: string
  followerId: string
  status?: $Enums.FollowStatusEnum
}

export type MangaFollowerUpdateInput = {
  status?: Prisma.EnumFollowStatusEnumFieldUpdateOperationsInput | $Enums.FollowStatusEnum
  manga?: Prisma.MangaUpdateOneRequiredWithoutFollowersNestedInput
  follower?: Prisma.UserUpdateOneRequiredWithoutFollowingMangasNestedInput
}

export type MangaFollowerUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  mangaId?: Prisma.StringFieldUpdateOperationsInput | string
  followerId?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumFollowStatusEnumFieldUpdateOperationsInput | $Enums.FollowStatusEnum
}

export type MangaFollowerCreateManyInput = {
  id?: number
  mangaId: string
  followerId: string
  status?: $Enums.FollowStatusEnum
}

export type MangaFollowerUpdateManyMutationInput = {
  status?: Prisma.EnumFollowStatusEnumFieldUpdateOperationsInput | $Enums.FollowStatusEnum
}

export type MangaFollowerUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  mangaId?: Prisma.StringFieldUpdateOperationsInput | string
  followerId?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumFollowStatusEnumFieldUpdateOperationsInput | $Enums.FollowStatusEnum
}

export type MangaFollowerListRelationFilter = {
  every?: Prisma.MangaFollowerWhereInput
  some?: Prisma.MangaFollowerWhereInput
  none?: Prisma.MangaFollowerWhereInput
}

export type MangaFollowerOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type MangaFollowerMangaIdFollowerIdCompoundUniqueInput = {
  mangaId: string
  followerId: string
}

export type MangaFollowerCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  mangaId?: Prisma.SortOrder
  followerId?: Prisma.SortOrder
  status?: Prisma.SortOrder
}

export type MangaFollowerAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type MangaFollowerMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  mangaId?: Prisma.SortOrder
  followerId?: Prisma.SortOrder
  status?: Prisma.SortOrder
}

export type MangaFollowerMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  mangaId?: Prisma.SortOrder
  followerId?: Prisma.SortOrder
  status?: Prisma.SortOrder
}

export type MangaFollowerSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type MangaFollowerCreateNestedManyWithoutFollowerInput = {
  create?: Prisma.XOR<Prisma.MangaFollowerCreateWithoutFollowerInput, Prisma.MangaFollowerUncheckedCreateWithoutFollowerInput> | Prisma.MangaFollowerCreateWithoutFollowerInput[] | Prisma.MangaFollowerUncheckedCreateWithoutFollowerInput[]
  connectOrCreate?: Prisma.MangaFollowerCreateOrConnectWithoutFollowerInput | Prisma.MangaFollowerCreateOrConnectWithoutFollowerInput[]
  createMany?: Prisma.MangaFollowerCreateManyFollowerInputEnvelope
  connect?: Prisma.MangaFollowerWhereUniqueInput | Prisma.MangaFollowerWhereUniqueInput[]
}

export type MangaFollowerUncheckedCreateNestedManyWithoutFollowerInput = {
  create?: Prisma.XOR<Prisma.MangaFollowerCreateWithoutFollowerInput, Prisma.MangaFollowerUncheckedCreateWithoutFollowerInput> | Prisma.MangaFollowerCreateWithoutFollowerInput[] | Prisma.MangaFollowerUncheckedCreateWithoutFollowerInput[]
  connectOrCreate?: Prisma.MangaFollowerCreateOrConnectWithoutFollowerInput | Prisma.MangaFollowerCreateOrConnectWithoutFollowerInput[]
  createMany?: Prisma.MangaFollowerCreateManyFollowerInputEnvelope
  connect?: Prisma.MangaFollowerWhereUniqueInput | Prisma.MangaFollowerWhereUniqueInput[]
}

export type MangaFollowerUpdateManyWithoutFollowerNestedInput = {
  create?: Prisma.XOR<Prisma.MangaFollowerCreateWithoutFollowerInput, Prisma.MangaFollowerUncheckedCreateWithoutFollowerInput> | Prisma.MangaFollowerCreateWithoutFollowerInput[] | Prisma.MangaFollowerUncheckedCreateWithoutFollowerInput[]
  connectOrCreate?: Prisma.MangaFollowerCreateOrConnectWithoutFollowerInput | Prisma.MangaFollowerCreateOrConnectWithoutFollowerInput[]
  upsert?: Prisma.MangaFollowerUpsertWithWhereUniqueWithoutFollowerInput | Prisma.MangaFollowerUpsertWithWhereUniqueWithoutFollowerInput[]
  createMany?: Prisma.MangaFollowerCreateManyFollowerInputEnvelope
  set?: Prisma.MangaFollowerWhereUniqueInput | Prisma.MangaFollowerWhereUniqueInput[]
  disconnect?: Prisma.MangaFollowerWhereUniqueInput | Prisma.MangaFollowerWhereUniqueInput[]
  delete?: Prisma.MangaFollowerWhereUniqueInput | Prisma.MangaFollowerWhereUniqueInput[]
  connect?: Prisma.MangaFollowerWhereUniqueInput | Prisma.MangaFollowerWhereUniqueInput[]
  update?: Prisma.MangaFollowerUpdateWithWhereUniqueWithoutFollowerInput | Prisma.MangaFollowerUpdateWithWhereUniqueWithoutFollowerInput[]
  updateMany?: Prisma.MangaFollowerUpdateManyWithWhereWithoutFollowerInput | Prisma.MangaFollowerUpdateManyWithWhereWithoutFollowerInput[]
  deleteMany?: Prisma.MangaFollowerScalarWhereInput | Prisma.MangaFollowerScalarWhereInput[]
}

export type MangaFollowerUncheckedUpdateManyWithoutFollowerNestedInput = {
  create?: Prisma.XOR<Prisma.MangaFollowerCreateWithoutFollowerInput, Prisma.MangaFollowerUncheckedCreateWithoutFollowerInput> | Prisma.MangaFollowerCreateWithoutFollowerInput[] | Prisma.MangaFollowerUncheckedCreateWithoutFollowerInput[]
  connectOrCreate?: Prisma.MangaFollowerCreateOrConnectWithoutFollowerInput | Prisma.MangaFollowerCreateOrConnectWithoutFollowerInput[]
  upsert?: Prisma.MangaFollowerUpsertWithWhereUniqueWithoutFollowerInput | Prisma.MangaFollowerUpsertWithWhereUniqueWithoutFollowerInput[]
  createMany?: Prisma.MangaFollowerCreateManyFollowerInputEnvelope
  set?: Prisma.MangaFollowerWhereUniqueInput | Prisma.MangaFollowerWhereUniqueInput[]
  disconnect?: Prisma.MangaFollowerWhereUniqueInput | Prisma.MangaFollowerWhereUniqueInput[]
  delete?: Prisma.MangaFollowerWhereUniqueInput | Prisma.MangaFollowerWhereUniqueInput[]
  connect?: Prisma.MangaFollowerWhereUniqueInput | Prisma.MangaFollowerWhereUniqueInput[]
  update?: Prisma.MangaFollowerUpdateWithWhereUniqueWithoutFollowerInput | Prisma.MangaFollowerUpdateWithWhereUniqueWithoutFollowerInput[]
  updateMany?: Prisma.MangaFollowerUpdateManyWithWhereWithoutFollowerInput | Prisma.MangaFollowerUpdateManyWithWhereWithoutFollowerInput[]
  deleteMany?: Prisma.MangaFollowerScalarWhereInput | Prisma.MangaFollowerScalarWhereInput[]
}

export type MangaFollowerCreateNestedManyWithoutMangaInput = {
  create?: Prisma.XOR<Prisma.MangaFollowerCreateWithoutMangaInput, Prisma.MangaFollowerUncheckedCreateWithoutMangaInput> | Prisma.MangaFollowerCreateWithoutMangaInput[] | Prisma.MangaFollowerUncheckedCreateWithoutMangaInput[]
  connectOrCreate?: Prisma.MangaFollowerCreateOrConnectWithoutMangaInput | Prisma.MangaFollowerCreateOrConnectWithoutMangaInput[]
  createMany?: Prisma.MangaFollowerCreateManyMangaInputEnvelope
  connect?: Prisma.MangaFollowerWhereUniqueInput | Prisma.MangaFollowerWhereUniqueInput[]
}

export type MangaFollowerUncheckedCreateNestedManyWithoutMangaInput = {
  create?: Prisma.XOR<Prisma.MangaFollowerCreateWithoutMangaInput, Prisma.MangaFollowerUncheckedCreateWithoutMangaInput> | Prisma.MangaFollowerCreateWithoutMangaInput[] | Prisma.MangaFollowerUncheckedCreateWithoutMangaInput[]
  connectOrCreate?: Prisma.MangaFollowerCreateOrConnectWithoutMangaInput | Prisma.MangaFollowerCreateOrConnectWithoutMangaInput[]
  createMany?: Prisma.MangaFollowerCreateManyMangaInputEnvelope
  connect?: Prisma.MangaFollowerWhereUniqueInput | Prisma.MangaFollowerWhereUniqueInput[]
}

export type MangaFollowerUpdateManyWithoutMangaNestedInput = {
  create?: Prisma.XOR<Prisma.MangaFollowerCreateWithoutMangaInput, Prisma.MangaFollowerUncheckedCreateWithoutMangaInput> | Prisma.MangaFollowerCreateWithoutMangaInput[] | Prisma.MangaFollowerUncheckedCreateWithoutMangaInput[]
  connectOrCreate?: Prisma.MangaFollowerCreateOrConnectWithoutMangaInput | Prisma.MangaFollowerCreateOrConnectWithoutMangaInput[]
  upsert?: Prisma.MangaFollowerUpsertWithWhereUniqueWithoutMangaInput | Prisma.MangaFollowerUpsertWithWhereUniqueWithoutMangaInput[]
  createMany?: Prisma.MangaFollowerCreateManyMangaInputEnvelope
  set?: Prisma.MangaFollowerWhereUniqueInput | Prisma.MangaFollowerWhereUniqueInput[]
  disconnect?: Prisma.MangaFollowerWhereUniqueInput | Prisma.MangaFollowerWhereUniqueInput[]
  delete?: Prisma.MangaFollowerWhereUniqueInput | Prisma.MangaFollowerWhereUniqueInput[]
  connect?: Prisma.MangaFollowerWhereUniqueInput | Prisma.MangaFollowerWhereUniqueInput[]
  update?: Prisma.MangaFollowerUpdateWithWhereUniqueWithoutMangaInput | Prisma.MangaFollowerUpdateWithWhereUniqueWithoutMangaInput[]
  updateMany?: Prisma.MangaFollowerUpdateManyWithWhereWithoutMangaInput | Prisma.MangaFollowerUpdateManyWithWhereWithoutMangaInput[]
  deleteMany?: Prisma.MangaFollowerScalarWhereInput | Prisma.MangaFollowerScalarWhereInput[]
}

export type MangaFollowerUncheckedUpdateManyWithoutMangaNestedInput = {
  create?: Prisma.XOR<Prisma.MangaFollowerCreateWithoutMangaInput, Prisma.MangaFollowerUncheckedCreateWithoutMangaInput> | Prisma.MangaFollowerCreateWithoutMangaInput[] | Prisma.MangaFollowerUncheckedCreateWithoutMangaInput[]
  connectOrCreate?: Prisma.MangaFollowerCreateOrConnectWithoutMangaInput | Prisma.MangaFollowerCreateOrConnectWithoutMangaInput[]
  upsert?: Prisma.MangaFollowerUpsertWithWhereUniqueWithoutMangaInput | Prisma.MangaFollowerUpsertWithWhereUniqueWithoutMangaInput[]
  createMany?: Prisma.MangaFollowerCreateManyMangaInputEnvelope
  set?: Prisma.MangaFollowerWhereUniqueInput | Prisma.MangaFollowerWhereUniqueInput[]
  disconnect?: Prisma.MangaFollowerWhereUniqueInput | Prisma.MangaFollowerWhereUniqueInput[]
  delete?: Prisma.MangaFollowerWhereUniqueInput | Prisma.MangaFollowerWhereUniqueInput[]
  connect?: Prisma.MangaFollowerWhereUniqueInput | Prisma.MangaFollowerWhereUniqueInput[]
  update?: Prisma.MangaFollowerUpdateWithWhereUniqueWithoutMangaInput | Prisma.MangaFollowerUpdateWithWhereUniqueWithoutMangaInput[]
  updateMany?: Prisma.MangaFollowerUpdateManyWithWhereWithoutMangaInput | Prisma.MangaFollowerUpdateManyWithWhereWithoutMangaInput[]
  deleteMany?: Prisma.MangaFollowerScalarWhereInput | Prisma.MangaFollowerScalarWhereInput[]
}

export type EnumFollowStatusEnumFieldUpdateOperationsInput = {
  set?: $Enums.FollowStatusEnum
}

export type MangaFollowerCreateWithoutFollowerInput = {
  status?: $Enums.FollowStatusEnum
  manga: Prisma.MangaCreateNestedOneWithoutFollowersInput
}

export type MangaFollowerUncheckedCreateWithoutFollowerInput = {
  id?: number
  mangaId: string
  status?: $Enums.FollowStatusEnum
}

export type MangaFollowerCreateOrConnectWithoutFollowerInput = {
  where: Prisma.MangaFollowerWhereUniqueInput
  create: Prisma.XOR<Prisma.MangaFollowerCreateWithoutFollowerInput, Prisma.MangaFollowerUncheckedCreateWithoutFollowerInput>
}

export type MangaFollowerCreateManyFollowerInputEnvelope = {
  data: Prisma.MangaFollowerCreateManyFollowerInput | Prisma.MangaFollowerCreateManyFollowerInput[]
  skipDuplicates?: boolean
}

export type MangaFollowerUpsertWithWhereUniqueWithoutFollowerInput = {
  where: Prisma.MangaFollowerWhereUniqueInput
  update: Prisma.XOR<Prisma.MangaFollowerUpdateWithoutFollowerInput, Prisma.MangaFollowerUncheckedUpdateWithoutFollowerInput>
  create: Prisma.XOR<Prisma.MangaFollowerCreateWithoutFollowerInput, Prisma.MangaFollowerUncheckedCreateWithoutFollowerInput>
}

export type MangaFollowerUpdateWithWhereUniqueWithoutFollowerInput = {
  where: Prisma.MangaFollowerWhereUniqueInput
  data: Prisma.XOR<Prisma.MangaFollowerUpdateWithoutFollowerInput, Prisma.MangaFollowerUncheckedUpdateWithoutFollowerInput>
}

export type MangaFollowerUpdateManyWithWhereWithoutFollowerInput = {
  where: Prisma.MangaFollowerScalarWhereInput
  data: Prisma.XOR<Prisma.MangaFollowerUpdateManyMutationInput, Prisma.MangaFollowerUncheckedUpdateManyWithoutFollowerInput>
}

export type MangaFollowerScalarWhereInput = {
  AND?: Prisma.MangaFollowerScalarWhereInput | Prisma.MangaFollowerScalarWhereInput[]
  OR?: Prisma.MangaFollowerScalarWhereInput[]
  NOT?: Prisma.MangaFollowerScalarWhereInput | Prisma.MangaFollowerScalarWhereInput[]
  id?: Prisma.IntFilter<"MangaFollower"> | number
  mangaId?: Prisma.StringFilter<"MangaFollower"> | string
  followerId?: Prisma.StringFilter<"MangaFollower"> | string
  status?: Prisma.EnumFollowStatusEnumFilter<"MangaFollower"> | $Enums.FollowStatusEnum
}

export type MangaFollowerCreateWithoutMangaInput = {
  status?: $Enums.FollowStatusEnum
  follower: Prisma.UserCreateNestedOneWithoutFollowingMangasInput
}

export type MangaFollowerUncheckedCreateWithoutMangaInput = {
  id?: number
  followerId: string
  status?: $Enums.FollowStatusEnum
}

export type MangaFollowerCreateOrConnectWithoutMangaInput = {
  where: Prisma.MangaFollowerWhereUniqueInput
  create: Prisma.XOR<Prisma.MangaFollowerCreateWithoutMangaInput, Prisma.MangaFollowerUncheckedCreateWithoutMangaInput>
}

export type MangaFollowerCreateManyMangaInputEnvelope = {
  data: Prisma.MangaFollowerCreateManyMangaInput | Prisma.MangaFollowerCreateManyMangaInput[]
  skipDuplicates?: boolean
}

export type MangaFollowerUpsertWithWhereUniqueWithoutMangaInput = {
  where: Prisma.MangaFollowerWhereUniqueInput
  update: Prisma.XOR<Prisma.MangaFollowerUpdateWithoutMangaInput, Prisma.MangaFollowerUncheckedUpdateWithoutMangaInput>
  create: Prisma.XOR<Prisma.MangaFollowerCreateWithoutMangaInput, Prisma.MangaFollowerUncheckedCreateWithoutMangaInput>
}

export type MangaFollowerUpdateWithWhereUniqueWithoutMangaInput = {
  where: Prisma.MangaFollowerWhereUniqueInput
  data: Prisma.XOR<Prisma.MangaFollowerUpdateWithoutMangaInput, Prisma.MangaFollowerUncheckedUpdateWithoutMangaInput>
}

export type MangaFollowerUpdateManyWithWhereWithoutMangaInput = {
  where: Prisma.MangaFollowerScalarWhereInput
  data: Prisma.XOR<Prisma.MangaFollowerUpdateManyMutationInput, Prisma.MangaFollowerUncheckedUpdateManyWithoutMangaInput>
}

export type MangaFollowerCreateManyFollowerInput = {
  id?: number
  mangaId: string
  status?: $Enums.FollowStatusEnum
}

export type MangaFollowerUpdateWithoutFollowerInput = {
  status?: Prisma.EnumFollowStatusEnumFieldUpdateOperationsInput | $Enums.FollowStatusEnum
  manga?: Prisma.MangaUpdateOneRequiredWithoutFollowersNestedInput
}

export type MangaFollowerUncheckedUpdateWithoutFollowerInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  mangaId?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumFollowStatusEnumFieldUpdateOperationsInput | $Enums.FollowStatusEnum
}

export type MangaFollowerUncheckedUpdateManyWithoutFollowerInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  mangaId?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumFollowStatusEnumFieldUpdateOperationsInput | $Enums.FollowStatusEnum
}

export type MangaFollowerCreateManyMangaInput = {
  id?: number
  followerId: string
  status?: $Enums.FollowStatusEnum
}

export type MangaFollowerUpdateWithoutMangaInput = {
  status?: Prisma.EnumFollowStatusEnumFieldUpdateOperationsInput | $Enums.FollowStatusEnum
  follower?: Prisma.UserUpdateOneRequiredWithoutFollowingMangasNestedInput
}

export type MangaFollowerUncheckedUpdateWithoutMangaInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  followerId?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumFollowStatusEnumFieldUpdateOperationsInput | $Enums.FollowStatusEnum
}

export type MangaFollowerUncheckedUpdateManyWithoutMangaInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  followerId?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumFollowStatusEnumFieldUpdateOperationsInput | $Enums.FollowStatusEnum
}



export type MangaFollowerSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  mangaId?: boolean
  followerId?: boolean
  status?: boolean
  manga?: boolean | Prisma.MangaDefaultArgs<ExtArgs>
  follower?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["mangaFollower"]>

export type MangaFollowerSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  mangaId?: boolean
  followerId?: boolean
  status?: boolean
  manga?: boolean | Prisma.MangaDefaultArgs<ExtArgs>
  follower?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["mangaFollower"]>

export type MangaFollowerSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  mangaId?: boolean
  followerId?: boolean
  status?: boolean
  manga?: boolean | Prisma.MangaDefaultArgs<ExtArgs>
  follower?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["mangaFollower"]>

export type MangaFollowerSelectScalar = {
  id?: boolean
  mangaId?: boolean
  followerId?: boolean
  status?: boolean
}

export type MangaFollowerOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "mangaId" | "followerId" | "status", ExtArgs["result"]["mangaFollower"]>
export type MangaFollowerInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  manga?: boolean | Prisma.MangaDefaultArgs<ExtArgs>
  follower?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type MangaFollowerIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  manga?: boolean | Prisma.MangaDefaultArgs<ExtArgs>
  follower?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type MangaFollowerIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  manga?: boolean | Prisma.MangaDefaultArgs<ExtArgs>
  follower?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $MangaFollowerPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "MangaFollower"
  objects: {
    manga: Prisma.$MangaPayload<ExtArgs>
    follower: Prisma.$UserPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    mangaId: string
    followerId: string
    status: $Enums.FollowStatusEnum
  }, ExtArgs["result"]["mangaFollower"]>
  composites: {}
}

export type MangaFollowerGetPayload<S extends boolean | null | undefined | MangaFollowerDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$MangaFollowerPayload, S>

export type MangaFollowerCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<MangaFollowerFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: MangaFollowerCountAggregateInputType | true
  }

export interface MangaFollowerDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MangaFollower'], meta: { name: 'MangaFollower' } }
  /**
   * Find zero or one MangaFollower that matches the filter.
   * @param {MangaFollowerFindUniqueArgs} args - Arguments to find a MangaFollower
   * @example
   * // Get one MangaFollower
   * const mangaFollower = await prisma.mangaFollower.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends MangaFollowerFindUniqueArgs>(args: Prisma.SelectSubset<T, MangaFollowerFindUniqueArgs<ExtArgs>>): Prisma.Prisma__MangaFollowerClient<runtime.Types.Result.GetResult<Prisma.$MangaFollowerPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one MangaFollower that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {MangaFollowerFindUniqueOrThrowArgs} args - Arguments to find a MangaFollower
   * @example
   * // Get one MangaFollower
   * const mangaFollower = await prisma.mangaFollower.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends MangaFollowerFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, MangaFollowerFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__MangaFollowerClient<runtime.Types.Result.GetResult<Prisma.$MangaFollowerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first MangaFollower that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MangaFollowerFindFirstArgs} args - Arguments to find a MangaFollower
   * @example
   * // Get one MangaFollower
   * const mangaFollower = await prisma.mangaFollower.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends MangaFollowerFindFirstArgs>(args?: Prisma.SelectSubset<T, MangaFollowerFindFirstArgs<ExtArgs>>): Prisma.Prisma__MangaFollowerClient<runtime.Types.Result.GetResult<Prisma.$MangaFollowerPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first MangaFollower that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MangaFollowerFindFirstOrThrowArgs} args - Arguments to find a MangaFollower
   * @example
   * // Get one MangaFollower
   * const mangaFollower = await prisma.mangaFollower.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends MangaFollowerFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, MangaFollowerFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__MangaFollowerClient<runtime.Types.Result.GetResult<Prisma.$MangaFollowerPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more MangaFollowers that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MangaFollowerFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all MangaFollowers
   * const mangaFollowers = await prisma.mangaFollower.findMany()
   * 
   * // Get first 10 MangaFollowers
   * const mangaFollowers = await prisma.mangaFollower.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const mangaFollowerWithIdOnly = await prisma.mangaFollower.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends MangaFollowerFindManyArgs>(args?: Prisma.SelectSubset<T, MangaFollowerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MangaFollowerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a MangaFollower.
   * @param {MangaFollowerCreateArgs} args - Arguments to create a MangaFollower.
   * @example
   * // Create one MangaFollower
   * const MangaFollower = await prisma.mangaFollower.create({
   *   data: {
   *     // ... data to create a MangaFollower
   *   }
   * })
   * 
   */
  create<T extends MangaFollowerCreateArgs>(args: Prisma.SelectSubset<T, MangaFollowerCreateArgs<ExtArgs>>): Prisma.Prisma__MangaFollowerClient<runtime.Types.Result.GetResult<Prisma.$MangaFollowerPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many MangaFollowers.
   * @param {MangaFollowerCreateManyArgs} args - Arguments to create many MangaFollowers.
   * @example
   * // Create many MangaFollowers
   * const mangaFollower = await prisma.mangaFollower.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends MangaFollowerCreateManyArgs>(args?: Prisma.SelectSubset<T, MangaFollowerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many MangaFollowers and returns the data saved in the database.
   * @param {MangaFollowerCreateManyAndReturnArgs} args - Arguments to create many MangaFollowers.
   * @example
   * // Create many MangaFollowers
   * const mangaFollower = await prisma.mangaFollower.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many MangaFollowers and only return the `id`
   * const mangaFollowerWithIdOnly = await prisma.mangaFollower.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends MangaFollowerCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, MangaFollowerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MangaFollowerPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a MangaFollower.
   * @param {MangaFollowerDeleteArgs} args - Arguments to delete one MangaFollower.
   * @example
   * // Delete one MangaFollower
   * const MangaFollower = await prisma.mangaFollower.delete({
   *   where: {
   *     // ... filter to delete one MangaFollower
   *   }
   * })
   * 
   */
  delete<T extends MangaFollowerDeleteArgs>(args: Prisma.SelectSubset<T, MangaFollowerDeleteArgs<ExtArgs>>): Prisma.Prisma__MangaFollowerClient<runtime.Types.Result.GetResult<Prisma.$MangaFollowerPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one MangaFollower.
   * @param {MangaFollowerUpdateArgs} args - Arguments to update one MangaFollower.
   * @example
   * // Update one MangaFollower
   * const mangaFollower = await prisma.mangaFollower.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends MangaFollowerUpdateArgs>(args: Prisma.SelectSubset<T, MangaFollowerUpdateArgs<ExtArgs>>): Prisma.Prisma__MangaFollowerClient<runtime.Types.Result.GetResult<Prisma.$MangaFollowerPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more MangaFollowers.
   * @param {MangaFollowerDeleteManyArgs} args - Arguments to filter MangaFollowers to delete.
   * @example
   * // Delete a few MangaFollowers
   * const { count } = await prisma.mangaFollower.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends MangaFollowerDeleteManyArgs>(args?: Prisma.SelectSubset<T, MangaFollowerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more MangaFollowers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MangaFollowerUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many MangaFollowers
   * const mangaFollower = await prisma.mangaFollower.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends MangaFollowerUpdateManyArgs>(args: Prisma.SelectSubset<T, MangaFollowerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more MangaFollowers and returns the data updated in the database.
   * @param {MangaFollowerUpdateManyAndReturnArgs} args - Arguments to update many MangaFollowers.
   * @example
   * // Update many MangaFollowers
   * const mangaFollower = await prisma.mangaFollower.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more MangaFollowers and only return the `id`
   * const mangaFollowerWithIdOnly = await prisma.mangaFollower.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends MangaFollowerUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, MangaFollowerUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MangaFollowerPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one MangaFollower.
   * @param {MangaFollowerUpsertArgs} args - Arguments to update or create a MangaFollower.
   * @example
   * // Update or create a MangaFollower
   * const mangaFollower = await prisma.mangaFollower.upsert({
   *   create: {
   *     // ... data to create a MangaFollower
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the MangaFollower we want to update
   *   }
   * })
   */
  upsert<T extends MangaFollowerUpsertArgs>(args: Prisma.SelectSubset<T, MangaFollowerUpsertArgs<ExtArgs>>): Prisma.Prisma__MangaFollowerClient<runtime.Types.Result.GetResult<Prisma.$MangaFollowerPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of MangaFollowers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MangaFollowerCountArgs} args - Arguments to filter MangaFollowers to count.
   * @example
   * // Count the number of MangaFollowers
   * const count = await prisma.mangaFollower.count({
   *   where: {
   *     // ... the filter for the MangaFollowers we want to count
   *   }
   * })
  **/
  count<T extends MangaFollowerCountArgs>(
    args?: Prisma.Subset<T, MangaFollowerCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], MangaFollowerCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a MangaFollower.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MangaFollowerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends MangaFollowerAggregateArgs>(args: Prisma.Subset<T, MangaFollowerAggregateArgs>): Prisma.PrismaPromise<GetMangaFollowerAggregateType<T>>

  /**
   * Group by MangaFollower.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MangaFollowerGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends MangaFollowerGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: MangaFollowerGroupByArgs['orderBy'] }
      : { orderBy?: MangaFollowerGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, MangaFollowerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMangaFollowerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the MangaFollower model
 */
readonly fields: MangaFollowerFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for MangaFollower.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__MangaFollowerClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  manga<T extends Prisma.MangaDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.MangaDefaultArgs<ExtArgs>>): Prisma.Prisma__MangaClient<runtime.Types.Result.GetResult<Prisma.$MangaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  follower<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the MangaFollower model
 */
export interface MangaFollowerFieldRefs {
  readonly id: Prisma.FieldRef<"MangaFollower", 'Int'>
  readonly mangaId: Prisma.FieldRef<"MangaFollower", 'String'>
  readonly followerId: Prisma.FieldRef<"MangaFollower", 'String'>
  readonly status: Prisma.FieldRef<"MangaFollower", 'FollowStatusEnum'>
}
    

// Custom InputTypes
/**
 * MangaFollower findUnique
 */
export type MangaFollowerFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MangaFollower
   */
  select?: Prisma.MangaFollowerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MangaFollower
   */
  omit?: Prisma.MangaFollowerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MangaFollowerInclude<ExtArgs> | null
  /**
   * Filter, which MangaFollower to fetch.
   */
  where: Prisma.MangaFollowerWhereUniqueInput
}

/**
 * MangaFollower findUniqueOrThrow
 */
export type MangaFollowerFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MangaFollower
   */
  select?: Prisma.MangaFollowerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MangaFollower
   */
  omit?: Prisma.MangaFollowerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MangaFollowerInclude<ExtArgs> | null
  /**
   * Filter, which MangaFollower to fetch.
   */
  where: Prisma.MangaFollowerWhereUniqueInput
}

/**
 * MangaFollower findFirst
 */
export type MangaFollowerFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MangaFollower
   */
  select?: Prisma.MangaFollowerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MangaFollower
   */
  omit?: Prisma.MangaFollowerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MangaFollowerInclude<ExtArgs> | null
  /**
   * Filter, which MangaFollower to fetch.
   */
  where?: Prisma.MangaFollowerWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MangaFollowers to fetch.
   */
  orderBy?: Prisma.MangaFollowerOrderByWithRelationInput | Prisma.MangaFollowerOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for MangaFollowers.
   */
  cursor?: Prisma.MangaFollowerWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MangaFollowers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MangaFollowers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of MangaFollowers.
   */
  distinct?: Prisma.MangaFollowerScalarFieldEnum | Prisma.MangaFollowerScalarFieldEnum[]
}

/**
 * MangaFollower findFirstOrThrow
 */
export type MangaFollowerFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MangaFollower
   */
  select?: Prisma.MangaFollowerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MangaFollower
   */
  omit?: Prisma.MangaFollowerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MangaFollowerInclude<ExtArgs> | null
  /**
   * Filter, which MangaFollower to fetch.
   */
  where?: Prisma.MangaFollowerWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MangaFollowers to fetch.
   */
  orderBy?: Prisma.MangaFollowerOrderByWithRelationInput | Prisma.MangaFollowerOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for MangaFollowers.
   */
  cursor?: Prisma.MangaFollowerWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MangaFollowers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MangaFollowers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of MangaFollowers.
   */
  distinct?: Prisma.MangaFollowerScalarFieldEnum | Prisma.MangaFollowerScalarFieldEnum[]
}

/**
 * MangaFollower findMany
 */
export type MangaFollowerFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MangaFollower
   */
  select?: Prisma.MangaFollowerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MangaFollower
   */
  omit?: Prisma.MangaFollowerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MangaFollowerInclude<ExtArgs> | null
  /**
   * Filter, which MangaFollowers to fetch.
   */
  where?: Prisma.MangaFollowerWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MangaFollowers to fetch.
   */
  orderBy?: Prisma.MangaFollowerOrderByWithRelationInput | Prisma.MangaFollowerOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing MangaFollowers.
   */
  cursor?: Prisma.MangaFollowerWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MangaFollowers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MangaFollowers.
   */
  skip?: number
  distinct?: Prisma.MangaFollowerScalarFieldEnum | Prisma.MangaFollowerScalarFieldEnum[]
}

/**
 * MangaFollower create
 */
export type MangaFollowerCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MangaFollower
   */
  select?: Prisma.MangaFollowerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MangaFollower
   */
  omit?: Prisma.MangaFollowerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MangaFollowerInclude<ExtArgs> | null
  /**
   * The data needed to create a MangaFollower.
   */
  data: Prisma.XOR<Prisma.MangaFollowerCreateInput, Prisma.MangaFollowerUncheckedCreateInput>
}

/**
 * MangaFollower createMany
 */
export type MangaFollowerCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many MangaFollowers.
   */
  data: Prisma.MangaFollowerCreateManyInput | Prisma.MangaFollowerCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * MangaFollower createManyAndReturn
 */
export type MangaFollowerCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MangaFollower
   */
  select?: Prisma.MangaFollowerSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the MangaFollower
   */
  omit?: Prisma.MangaFollowerOmit<ExtArgs> | null
  /**
   * The data used to create many MangaFollowers.
   */
  data: Prisma.MangaFollowerCreateManyInput | Prisma.MangaFollowerCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MangaFollowerIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * MangaFollower update
 */
export type MangaFollowerUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MangaFollower
   */
  select?: Prisma.MangaFollowerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MangaFollower
   */
  omit?: Prisma.MangaFollowerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MangaFollowerInclude<ExtArgs> | null
  /**
   * The data needed to update a MangaFollower.
   */
  data: Prisma.XOR<Prisma.MangaFollowerUpdateInput, Prisma.MangaFollowerUncheckedUpdateInput>
  /**
   * Choose, which MangaFollower to update.
   */
  where: Prisma.MangaFollowerWhereUniqueInput
}

/**
 * MangaFollower updateMany
 */
export type MangaFollowerUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update MangaFollowers.
   */
  data: Prisma.XOR<Prisma.MangaFollowerUpdateManyMutationInput, Prisma.MangaFollowerUncheckedUpdateManyInput>
  /**
   * Filter which MangaFollowers to update
   */
  where?: Prisma.MangaFollowerWhereInput
  /**
   * Limit how many MangaFollowers to update.
   */
  limit?: number
}

/**
 * MangaFollower updateManyAndReturn
 */
export type MangaFollowerUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MangaFollower
   */
  select?: Prisma.MangaFollowerSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the MangaFollower
   */
  omit?: Prisma.MangaFollowerOmit<ExtArgs> | null
  /**
   * The data used to update MangaFollowers.
   */
  data: Prisma.XOR<Prisma.MangaFollowerUpdateManyMutationInput, Prisma.MangaFollowerUncheckedUpdateManyInput>
  /**
   * Filter which MangaFollowers to update
   */
  where?: Prisma.MangaFollowerWhereInput
  /**
   * Limit how many MangaFollowers to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MangaFollowerIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * MangaFollower upsert
 */
export type MangaFollowerUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MangaFollower
   */
  select?: Prisma.MangaFollowerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MangaFollower
   */
  omit?: Prisma.MangaFollowerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MangaFollowerInclude<ExtArgs> | null
  /**
   * The filter to search for the MangaFollower to update in case it exists.
   */
  where: Prisma.MangaFollowerWhereUniqueInput
  /**
   * In case the MangaFollower found by the `where` argument doesn't exist, create a new MangaFollower with this data.
   */
  create: Prisma.XOR<Prisma.MangaFollowerCreateInput, Prisma.MangaFollowerUncheckedCreateInput>
  /**
   * In case the MangaFollower was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.MangaFollowerUpdateInput, Prisma.MangaFollowerUncheckedUpdateInput>
}

/**
 * MangaFollower delete
 */
export type MangaFollowerDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MangaFollower
   */
  select?: Prisma.MangaFollowerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MangaFollower
   */
  omit?: Prisma.MangaFollowerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MangaFollowerInclude<ExtArgs> | null
  /**
   * Filter which MangaFollower to delete.
   */
  where: Prisma.MangaFollowerWhereUniqueInput
}

/**
 * MangaFollower deleteMany
 */
export type MangaFollowerDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which MangaFollowers to delete
   */
  where?: Prisma.MangaFollowerWhereInput
  /**
   * Limit how many MangaFollowers to delete.
   */
  limit?: number
}

/**
 * MangaFollower without action
 */
export type MangaFollowerDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MangaFollower
   */
  select?: Prisma.MangaFollowerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MangaFollower
   */
  omit?: Prisma.MangaFollowerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MangaFollowerInclude<ExtArgs> | null
}
